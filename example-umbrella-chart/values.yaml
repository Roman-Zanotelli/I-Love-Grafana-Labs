core: #Core microservices

  auth-api: #Auth-API configuration
    name: auth-api
    containerPort: 80
    replicaCount: 1
    image:
      repository: romanzanotelli/auth-api
      tag: "latest"
      pullPolicy: IfNotPresent
      pullSecrets:
        - docker-hub-secret
    env:
      database_url: "postgres://api_user:super-secure-password@auth-db:5432/auth_db"
      jwt_duration: "3600"
      jwt_secret: "something-super-duper-extra-secret!!!"
      jwt_iss: "auth-api"
    postgres:
      host: auth-db
      port: 5432
      waitTimeoutSeconds: 30
      waitSleepSeconds: 5


  bank-api:  #Bank-API configuration
    name: bank-api
    containerPort: 80
    replicaCount: 1
    image:
      repository: romanzanotelli/bank-api
      tag: "latest"
      pullPolicy: IfNotPresent
      pullSecrets:
        - docker-hub-secret
    env:
      database_url: "postgres://api_user:super-secure-password@bank-db:5432/bank_db"
      jwt_secret: "something-super-duper-extra-secret!!!"
    postgres:
      host: bank-db
      port: 5432
      waitTimeoutSeconds: 30
      waitSleepSeconds: 5


  bank-spa:  #Auth-SPA configuration
    name: bank-spa
    image:
      repository: romanzanotelli/bank-spa
      tag: latest
      pullPolicy: IfNotPresent
      pullSecrets:
        - docker-hub-secret
    replicaCount: 1
    containerPort: 80
    env:
      csp: |
        default-src 'self';
        connect-src 'self' https://localhost;
        script-src 'self';
        script-src-attr 'self' 'unsafe-inline';
        style-src 'self' 'unsafe-inline';
        style-src-elem 'self' 'unsafe-inline';
        font-src 'self';
        img-src 'self' data:;


  postgre:  #Postgre configurations
    image:
      repository: postgres
      tag: "16.3"
      pullPolicy: IfNotPresent
      pullSecrets:
        - docker-hub-secret
    instances:
      - name: auth-db
        port: 5432
        storage: 1Gi
        password: "super-secure-root-password"
        initScriptFolder: "init-scripts-auth"
      - name: bank-db
        port: 5432
        storage: 1Gi
        password: "super-secure-root-password"
        initScriptFolder: "init-scripts-bank"
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 500m
        memory: 256Mi

envoy: #Envoy Configuration
  image:
    repository: envoyproxy/envoy
    tag: v1.26-latest
    pullSecrets:
        - docker-hub-secret
  replicaCount: 1

prometheus: #Pormetheus Configuration
    image:
      repository: prom/prometheus
      tag: latest
      pullPolicy: IfNotPresent
      pullSecrets:
        - docker-hub-secret
    replicaCount: 1

loki: #Loki Configuration
  image:
    repository: grafana/loki
    tag: latest
    pullPolicy: IfNotPresent
    pullSecrets:
      - docker-hub-secret
  service:
    type: ClusterIP
    port: 3100
  persistence:
    enabled: false
  auth_enabled: false
  retention_period: 168h
  replicaCount: 1

promtail:
  config:
    clients:
      - url: http://loki:3100/loki/api/v1/push
    scrape_configs:
      - job_name: kubernetes-pods
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_namespace, __meta_kubernetes_pod_name, __meta_kubernetes_pod_uid, __meta_kubernetes_pod_container_name]
            separator: _
            replacement: /var/log/pods/${1}_${2}_${3}/${4}/0.log
            target_label: __path__
grafana:
  enabled: true
  adminPassword: "admin"
  grafana.ini:
    server:
      domain: localhost
      root_url: "https://%(domain)s/grafana/"
      serve_from_sub_path: true
  service:
    type: ClusterIP
    port: 80
  ingress:
    enabled: false
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Loki
          type: loki
          url: http://loki:3100
          access: proxy
          isDefault: true
        - name: Prometheus
          type: prometheus
          url: http://prometheus:9090
          access: proxy